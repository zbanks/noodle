WHITESPACE = _{ " " }
COMMENT = _{ 
    (("//" | "--") ~ ANY+) |
    ("/*" ~ ANY+ ~ "*/")
}

// Note: Keep field names human-readable, they end up in error messages

number = @{ ASCII_DIGIT+ }

punctuation = _{ "'" }
whitespace = _{ "_" }

character = { ASCII_ALPHA | dot | punctuation | whitespace }
dot = { "." }
letter_range = { ASCII_ALPHA ~ "-" ~ ASCII_ALPHA }
invert = { "^" }
class = { "[" ~ invert? ~ (letter_range | character)+ ~ "]" }
anagram_body = { ASCII_ALPHA+ }

sequence = { (repeat | term)+ }
alternatives = { sequence ~ ("|" ~ sequence)+ }
anagram = { "<" ~ anagram_body ~ ">" }
superanagram = { "<" ~ anagram_body ~ "+>" }
subanagram = { "<" ~ anagram_body ~ "->" }
transadd = { "<" ~ anagram_body ~ "+" ~ number ~ ">" }
transdelete = { "<" ~ anagram_body ~ "-" ~ number ~ ">" }
partial_group = { "(" ~ term+ ~ ":?)" }

repeat_optional = { term ~ "?" }
repeat_any = { term ~ "*" }
repeat_oneormore = { term ~ "+" }
repeat_atmost = { term ~ "{," ~ number ~ "}" }
repeat_exact = { term ~ "{" ~ number ~ "}" }
repeat_atleast = { term ~ "{" ~ number ~ ",}" }
repeat_range = { term ~ "{" ~ number ~ "," ~ number ~ "}" }

subexpression = _{ (alternatives | sequence) }
group = _{ "(" ~ subexpression ~ ")" }
term = _{
      class
    | dot
    | group
    | anagram
    | superanagram
    | subanagram
    | transadd
    | transdelete
    | partial_group
    | number
    | character
}
repeat = _{
    repeat_optional |
    repeat_any |
    repeat_oneormore |
    repeat_atmost |
    repeat_exact |
    repeat_atleast |
    repeat_range
}



option_word_boundaries = { "!_" }
option_punctuation = { "!'" }
option_fuzz = {"!" ~ number }
option = _{ option_word_boundaries | option_punctuation | option_fuzz }

expression = { SOI ~ subexpression ~ (option)* ~ EOI }

macro_name = { ASCII_ALPHA ~ (ASCII_ALPHA | ASCII_DIGIT | "_")+ }
macro_value = { (' '..'~')* } // Nearly any ASCII character
macro_define = { SOI ~ macro_name ~ "=" ~ macro_value ~ EOI }

pragma_words = { ^"#words" ~ number }
pragma_dict = { (^"#dict" | ^"#dictionary") ~ character+ }
pragma_limit = {^"#limit" ~ number }
pragma_quiet = {^"#quiet"}
pragma = _{ SOI ~ (pragma_words | pragma_dict | pragma_limit | pragma_quiet) ~ EOI }

empty_line = _{ SOI ~ EOI }

query = { (pragma | macro_define | expression | empty_line) }
