WHITESPACE = _{ " " }
COMMENT = _{ 
    (("//" | "--") ~ ANY+) |
    ("/*" ~ ANY+ ~ "*/")
}

number = { ASCII_DIGIT+ }
flag = { "!" ~ ("_" | "'" | number) }

punctuation = _{ "'" }
whitespace = _{ "_" }
literal = { ASCII_ALPHA | punctuation | whitespace }

dot = { "." }
letter_range = { ASCII_ALPHA ~ "-" ~ ASCII_ALPHA }
invert = { "^" }
class = { "[" ~ invert? ~ (letter_range | literal)+ ~ "]" }
anagram_body = { ASCII_ALPHA+ }

sequence = { (repeat | term)+ }
alternatives = { sequence ~ ("|" ~ sequence)+ }
subexpression = _{ (alternatives | sequence) }
group = _{ "(" ~ subexpression ~ ")" }
anagram = _{ "<" ~ anagram_body ~ ">" }
term = _{ class | dot | group | anagram | literal }

repeat = _{
    repeat_optional |
    repeat_any |
    repeat_oneormore |
    repeat_atmost |
    repeat_exact |
    repeat_atleast |
    repeat_range
}
repeat_optional = { term ~ "?" }
repeat_any = { term ~ "*" }
repeat_oneormore = { term ~ "+" }
repeat_atmost = { term ~ "{," ~ number ~ "}" }
repeat_exact = { term ~ "{" ~ number ~ "}" }
repeat_atleast = { term ~ "{" ~ number ~ ",}" }
repeat_range = { term ~ "{" ~ number ~ "," ~ number ~ "}" }

expression = { SOI ~ subexpression ~ (flag)* ~ EOI }

macro_name = { ASCII_ALPHA_UPPER ~ (ASCII_ALPHA_UPPER | ASCII_DIGIT | "_")+ }
macro_value = { (' '..'~')* } // Nearly any ASCII character
macro_define = { SOI ~ macro_name ~ "=" ~ macro_value ~ EOI }

pragma_words = { ^"#words" ~ number }
pragma_dict = { (^"#dict" | ^"#dictionary") ~ literal+ }
pragma_limit = {^"#limit" ~ number }
pragma_quiet = {^"#quiet"}
pragma = _{ SOI ~ (pragma_words | pragma_dict | pragma_limit | pragma_quiet) ~ EOI }

query = { (pragma | macro_define | expression)? }
